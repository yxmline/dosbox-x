
arch "x86";
category "MS-DOS";
description "Machine-parsable list of MS-DOS interrupt calls";

define var "DTA" {
    type "farptr 16:16"; /* 16:16 FAR pointer */
    name "Disk Transfer Address";
    description "Memory location where disk transfers and other API functions may occur";
}

define var "PSP" {
    type "segment";
    name "Program Segment Prefix";
    description "A 256-byte region of memory used to carry a program's initial state and command line.";
}

define var "dos_version" {
    type "version";
    name "DOS version, major.minor format";
}

define var "dos_errorlevel" {
    type "uint8_t";
    name "ERRORLEVEL aka process return code on exit";
}

define citation "rbil" {
    name "Ralph Brown Interrupt List";
}

define citation "msdncd92" {
    name "Microsoft Developer Network CD Fall 1992";
}

define citation "programmerpcsourcebook2nd" {
    name "The Programmer's PC Sourcebook, 2nd Edition, Microsoft Press";
}

interrupt "MS-DOS INT 20" {
    name "INT 20h DOS Terminte process";
    interrupt number 0x20;
    input "CS" {
        content "PSP segment";
        description "PSP segment of process to terminate";
    }
    output "dos_errorlevel" {
        content 0x00;
        description "Return code set to 00h";
    }
    dos_version (dos_version >= 1.0);
    description "Terminate the process. Return code aka error level is set to 00h.";
    see_also interrupt "MS-DOS INT 21" select by "AH" value 0x00;
}

interrupt "MS-DOS INT 21" {
    name "INT 21h DOS system interrupt";
    interrupt number 0x21;
    select by "AH" {

        value 0x00 {
            name "Terminate program";
            input "CS" {
                content "PSP segment";
                description "PSP segment of process to terminate";
            }
            output "dos_errorlevel" {
                content 0x00;
                description "Return code set to 00h";
            }
            dos_version (dos_version >= 1.0);
            description "Terminate the process. Return code aka error level is set to 00h.";

            notes "Microsoft recommends using INT 21/AH=4Ch for DOS 2+. This function sets the program's return code (ERRORLEVEL) to 00h. Execution continues at the address stored in INT 22 after DOS performs whatever cleanup it needs to do (restoring the INT 22,INT 23,INT 24 vectors from the PSP assumed to be located at offset 0000h in the segment indicated by the stack copy of CS, etc.). If the PSP is its own parent, the process's memory is not freed; if INT 22 additionally points into the terminating program, the process is effectively NOT terminated. Not supported by MS Windows 3.0 DOSX.EXE DOS extender" citation "rbil";

            notes "Terminates the current process. This is one of several methods that a program can use to perform a final exit. MS-DOS then takes the following actions:\n\n    All memory belonging to the process is released.\n    File buffers are flushed and any open handles for files or devices owned by the process are closed.\n    The termination handler vector (Int 22H) is restored from PSP:000AH.\n    The Ctrl-C handler vector (Int 23H) is restored from PSP:000EH.\n    [2.0+] The critical-error handler vector (Int 24H) is restored from PSP:0012H.\n    Control is transferred to the termination handler.\n\nIf the program is returning to COMMAND.COM, control transfers to the resident portion, and the transient portion is reloaded if necessary. If a batch file is in progress, the next line of the file is fetched and interpreted; otherwise, a prompt is issued for the next user command.\n\n    Any files that have been written to using FCBs should be closed before performing this exit call; otherwise, data may be lost.\n    [3.0+] If the program is running on a network, it should remove all locks it has placed on file regions before terminating." citation "msdncd92";
        }

        value 0x01 {
            name "Read character from standard input, with echo";
            output "AL" {
                content "uint8_t";
                description "Character value read";
            }
            dos_version (dos_version >= 1.0);
            description "Read from STDIN, with CTRL+C/CTRL+BREAK checking and some CTRL combinations handled by the console automatically";

            notes "^C/^Break are checked, and INT 23 executed if read. ^P toggles the DOS-internal echo-to-printer flag. ^Z is not interpreted, thus not causing an EOF if input is redirected. Character is echoed to standard output. Standard input is always the keyboard and standard output the screen under DOS 1.x, but they may be redirected under DOS 2+" citation "rbil";

            notes "[1] Inputs a character from the keyboard, then echoes it to the display. If no character is ready, waits until one is available.\n[2.0+] Reads a character from the standard input device and echoes it to the standard output device. If no character is ready, waits until one is available. Input can be redirected. (If input has been redirected, there is no way to detect EOF.)\n\nIf the standard input is not redirected, and the character read is a Ctrl-C, an Int 23H is executed. If the standard input is redirected, a Ctrl-C is detected at the console, and BREAK is ON, an Int 23H is executed.\n    To read extended ASCII codes (such as the special function keys F1 to F10) on the IBM PC and compatibles, you must call this function twice. The first call returns the value 00H to signal the presence of an extended code.\n    [2.0+] You can also read the keyboard by issuing a read (Int 21H Function 3FH) using the predefined handle for the standard input (0000H), if input has not been redirected, or a handle obtained by opening the logical device CON." citation "msdncd92";
        }

        value 0x02 {
            name "Write character to standard output";
            input "DL" {
                content "uint8_t";
                description "Character value to write";
            }
            output "AL" citation "rbil" {
                content "uint8_t";
                dos_version (dos_version >= 2.1);
                description "Last character output, despite official docs which state nothing is returned. MS-DOS 2.1 to 7.0 at least.";
            }
            dos_version (dos_version >= 1.0);
            description "Write to STDOUT, with CTRL+C/CTRL+BREAK checking";

            notes "^C/^Break are checked, and INT 23 executed if pressed. Standard output is always the screen under DOS 1.x, but may be redirected under DOS 2+. The last character output will be the character in DL unless DL=09h on entry, in which case AL=20h as tabs are expanded to blanks. If standard output is redirected to a file, no error checks (write- protected, full media, etc.) are performed" citation "rbil";

            notes "[1] Outputs a character to the currently active video display.\n[2.0+] Outputs a character to the standard output device. Output can be redirected. (If output is redirected, there is no way to detect disk full.)\n\nIf a Ctrl-C is detected at the keyboard after the requested character is output, an Int 23H is executed.\n    If the standard output has not been redirected, a backspace code (08H) causes the cursor to move left one position. If output has been redirected, the backspace code does not receive any special treatment.\n    [2.0+] You can also send strings to the display by performing a write (Int 21H Function 40H) using the predefined handle for the standard output (0001H), if output has not been redirected, or a handle obtained by opening the logical device CON." citation "msdncd92";
        }
    } /* end select by "AH" */
} /* end "MS-DOS INT 21" */

