
arch "x86";
description "Machine-parsable list of opcodes";
charset_encoding "UTF-8"; /* default */

/* predefined variables:
   codesize == 16 || codesize == 32 || codesize == 64: word code access size (affects code handling)
   datasize == 16 || datasize == 32 || datasize == 64: word data access size (affects data handling)
   dsreg: default segment OR segment override
   CS, DS, ES, FS, GS, SS: segment registers
   reg: general register, operand (regw if word, regb if byte)
   regb: general register, byte operand (AH, AL, etc)
   regw: general register, word operand (AX, BX, CX, etc if 16-bit, EAX, EBX, etc if 32-bit)
   sreg: segment register, operand
   rm: register/memory operand, word operand
   rmb: register/memory operand, byte operand
   rmw: register/memory operand, byte operand
   mrm: mod/reg/rm (with optional scalar/index/byte if 32-bit addressing with the right combination)
   opbyte(n): opcode byte n
   accum: AX/EAX
   base: BX/EBX
   counter: CX/ECX
   daccum: DX/EDX
   srcidx: SI/ESI
   dstidx: DI/EDI
   immb: 8-bit immediate
   immw: word immediate
   immsb: 8-bit immediate signed
   sib: scalar/index/byte
   flags: flags register (FLAGS if 16-bit, EFLAGS if 32-bit)
   flags(...): specific flags (bitmask)
   stackp: stack pointer (SP/ESP)
   basep: base pointer (BP/EBP)
   stackdataw: word value on stack [SS:stackp]. 16-bit or 32-bit depending on ?
   ip: instruction pointer (IP/EIP). For input, the value is the instruction pointer after decode.
   cpulevel: 0=8086 1=80186 2=286 3=386 4=486 5=Pentium
   [A,B]: Range syntax, A <= x <= B inclusive
*/

/* avoid copy-pasta */
common opcode "ADD" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst += src */
    input dst,src; /* reads dst, src */
    output dst; /* writes dst */
}

common opcode "OR" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst |= src */
    input dst,src; /* reads dst, src */
    output dst; /* writes dst */
}

common opcode "ADC" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst += src + CF */
    input dst,src,flags(CF); /* reads dst, src, CF flag */
    output dst; /* writes dst */
}

common opcode "SBB" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst -= src + CF */
    input dst,src,flags(CF); /* reads dst, src, CF flag */
    output dst; /* writes dst */
}

common opcode "AND" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst &= src */
    input dst,src; /* reads dst, src */
    output dst; /* writes dst */
}

common opcode "SUB" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst -= src */
    input dst,src; /* reads dst, src */
    output dst; /* writes dst */
}

common opcode "XOR" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst ^= src */
    input dst,src; /* reads dst, src */
    output dst; /* writes dst */
}

common opcode "CMP" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* tmp = dst - src */
    input dst,src; /* reads dst, src */
}

common opcode "PUSH" param(src) {
    modifies stackp; /* stackp -= word size */
    output stackdataw;
    input src;

    /* how to show it */
    syntax src;
}

common opcode "POP" param(dst) {
    modifies stackp; /* stackp += word size */
    input stackdataw;
    output dst;

    /* how to show it */
    syntax dst;
}

common opcode "INC" param(what) {
    modifies flags(PF,AF,ZF,SF,OF); /* not CF */

    /* what++ or what = what + 1 */
    input what;
    output what;

    /* how to show it */
    syntax what;
}

common opcode "DEC" param(what) {
    modifies flags(PF,AF,ZF,SF,OF); /* not CF */

    /* what-- or what = what - 1 */
    input what;
    output what;

    /* how to show it */
    syntax what;
}

common opcode "Jcc" param(imm,insp,flags,cond) {
    modifies insp if cond();

    input insp,flags,imm;

    /* if cond(), instruction pointer (after decode) is set to insp+imm */
    var fip = insp+imm;
    insp = fip if cond();

    /* how to show it (disassemblers show the sum, not the immediate) */
    syntax fip;
}

opcode sequence(0x00 mrm) name "ADD" { /* ADD r/m, reg */ common opcode "ADD" param(rmb,regb); }
opcode sequence(0x01 mrm) name "ADD" { /* ADD r/m, reg */ common opcode "ADD" param(rmw,regw); }
opcode sequence(0x02 mrm) name "ADD" { /* ADD reg, r/m */ common opcode "ADD" param(regb,rmb); }
opcode sequence(0x03 mrm) name "ADD" { /* ADD reg, r/m */ common opcode "ADD" param(regw,rmw); }
opcode sequence(0x04 immb) name "ADD" { /* ADD AL, imm */ common opcode "ADD" param(AL,immb); }
opcode sequence(0x05 immw) name "ADD" { /* ADD AX, imm */ common opcode "ADD" param(accum,immw); }
opcode sequence(0x06) name "PUSH" { /* PUSH ES */ common opcode "PUSH" param(ES); }
opcode sequence(0x07) name "POP" { /* POP ES */ common opcode "POP" param(ES); }

opcode sequence(0x08 mrm) name "OR" { /* OR r/m, reg */ common opcode "OR" param(rmb,regb); }
opcode sequence(0x09 mrm) name "OR" { /* OR r/m, reg */ common opcode "OR" param(rmw,regw); }
opcode sequence(0x0A mrm) name "OR" { /* OR reg, r/m */ common opcode "OR" param(regb,rmb); }
opcode sequence(0x0B mrm) name "OR" { /* OR reg, r/m */ common opcode "OR" param(regw,rmw); }
opcode sequence(0x0C immb) name "OR" { /* OR AL, imm */ common opcode "OR" param(AL,immb); }
opcode sequence(0x0D immw) name "OR" { /* OR AX, imm */ common opcode "OR" param(accum,immw); }
opcode sequence(0x0E) name "PUSH" { /* PUSH CS */ common opcode "PUSH" param(CS); }

opcode sequence(0x0F) name "POP" { /* POP CS */
    if cpulevel == 0 {
        common opcode "POP" param(CS);
    }
    else {
        reject; /* prefix to next opcode byte, not opcode, this rule does not apply */
    }
}

opcode sequence(0x10 mrm) name "ADC" { /* ADC r/m, reg */ common opcode "ADC" param(rmb,regb); }
opcode sequence(0x11 mrm) name "ADC" { /* ADC r/m, reg */ common opcode "ADC" param(rmw,regw); }
opcode sequence(0x12 mrm) name "ADC" { /* ADC reg, r/m */ common opcode "ADC" param(regb,rmb); }
opcode sequence(0x13 mrm) name "ADC" { /* ADC reg, r/m */ common opcode "ADC" param(regw,rmw); }
opcode sequence(0x14 immb) name "ADC" { /* ADC AL, imm */ common opcode "ADC" param(AL,immb); }
opcode sequence(0x15 immw) name "ADC" { /* ADC AX, imm */ common opcode "ADC" param(accum,immw); }
opcode sequence(0x16) name "PUSH" { /* PUSH ES */ common opcode "PUSH" param(SS); }
opcode sequence(0x17) name "POP" { /* POP ES */ common opcode "POP" param(SS); }

opcode sequence(0x18 mrm) name "SBB" { /* SBB r/m, reg */ common opcode "SBB" param(rmb,regb); }
opcode sequence(0x19 mrm) name "SBB" { /* SBB r/m, reg */ common opcode "SBB" param(rmw,regw); }
opcode sequence(0x1A mrm) name "SBB" { /* SBB reg, r/m */ common opcode "SBB" param(regb,rmb); }
opcode sequence(0x1B mrm) name "SBB" { /* SBB reg, r/m */ common opcode "SBB" param(regw,rmw); }
opcode sequence(0x1C immb) name "SBB" { /* SBB AL, imm */ common opcode "SBB" param(AL,immb); }
opcode sequence(0x1D immw) name "SBB" { /* SBB AX, imm */ common opcode "SBB" param(accum,immw); }
opcode sequence(0x1E) name "PUSH" { /* PUSH ES */ common opcode "PUSH" param(DS); }
opcode sequence(0x1F) name "POP" { /* POP ES */ common opcode "POP" param(DS); }

opcode sequence(0x20 mrm) name "AND" { /* AND r/m, reg */ common opcode "AND" param(rmb,regb); }
opcode sequence(0x21 mrm) name "AND" { /* AND r/m, reg */ common opcode "AND" param(rmw,regw); }
opcode sequence(0x22 mrm) name "AND" { /* AND reg, r/m */ common opcode "AND" param(regb,rmb); }
opcode sequence(0x23 mrm) name "AND" { /* AND reg, r/m */ common opcode "AND" param(regw,rmw); }
opcode sequence(0x24 immb) name "AND" { /* AND AL, imm */ common opcode "AND" param(AL,immb); }
opcode sequence(0x25 immw) name "AND" { /* AND AX, imm */ common opcode "AND" param(accum,immw); }
prefix sequence(0x26) name "ES:" { segment override ES; }
opcode sequence(0x27) name "DAA" {
    modifies flags(CF,PF,AF,ZF,SF,OF);
    input al,flags(CF);
    output al;
}

opcode sequence(0x28 mrm) name "SUB" { /* SUB r/m, reg */ common opcode "SUB" param(rmb,regb); }
opcode sequence(0x29 mrm) name "SUB" { /* SUB r/m, reg */ common opcode "SUB" param(rmw,regw); }
opcode sequence(0x2A mrm) name "SUB" { /* SUB reg, r/m */ common opcode "SUB" param(regb,rmb); }
opcode sequence(0x2B mrm) name "SUB" { /* SUB reg, r/m */ common opcode "SUB" param(regw,rmw); }
opcode sequence(0x2C immb) name "SUB" { /* SUB AL, imm */ common opcode "SUB" param(AL,immb); }
opcode sequence(0x2D immw) name "SUB" { /* SUB AX, imm */ common opcode "SUB" param(accum,immw); }
prefix sequence(0x2E) name "CS:" { segment override CS; }
opcode sequence(0x2F) name "DAS" {
    modifies flags(CF,PF,AF,ZF,SF,OF);
    input al,flags(CF);
    output al;
}

opcode sequence(0x30 mrm) name "XOR" { /* XOR r/m, reg */ common opcode "XOR" param(rmb,regb); }
opcode sequence(0x31 mrm) name "XOR" { /* XOR r/m, reg */ common opcode "XOR" param(rmw,regw); }
opcode sequence(0x32 mrm) name "XOR" { /* XOR reg, r/m */ common opcode "XOR" param(regb,rmb); }
opcode sequence(0x33 mrm) name "XOR" { /* XOR reg, r/m */ common opcode "XOR" param(regw,rmw); }
opcode sequence(0x34 immb) name "XOR" { /* XOR AL, imm */ common opcode "XOR" param(AL,immb); }
opcode sequence(0x35 immw) name "XOR" { /* XOR AX, imm */ common opcode "XOR" param(accum,immw); }
prefix sequence(0x36) name "ES:" { segment override SS; }
opcode sequence(0x37) name "AAA" {
    modifies flags(CF,PF,AF,ZF,SF,OF);
    input al,flags(CF);
    output al;
}

opcode sequence(0x38 mrm) name "CMP" { /* CMP r/m, reg */ common opcode "CMP" param(rmb,regb); }
opcode sequence(0x39 mrm) name "CMP" { /* CMP r/m, reg */ common opcode "CMP" param(rmw,regw); }
opcode sequence(0x3A mrm) name "CMP" { /* CMP reg, r/m */ common opcode "CMP" param(regb,rmb); }
opcode sequence(0x3B mrm) name "CMP" { /* CMP reg, r/m */ common opcode "CMP" param(regw,rmw); }
opcode sequence(0x3C immb) name "CMP" { /* CMP AL, imm */ common opcode "CMP" param(AL,immb); }
opcode sequence(0x3D immw) name "CMP" { /* CMP AX, imm */ common opcode "CMP" param(accum,immw); }
prefix sequence(0x3E) name "CS:" { segment override DS; }
opcode sequence(0x3F) name "AAS" {
    modifies flags(CF,PF,AF,ZF,SF,OF);
    input al,flags(CF);
    output al;
}

opcode sequence([0x40,0x47]) name "INC" {
    reg index = opbyte(0) & 7;
    common opcode "INC" param(regw); }
}

opcode sequence([0x48,0x4F]) name "DEC" {
    reg index = opbyte(0) & 7;
    common opcode "DEC" param(regw); }
}

opcode sequence([0x50,0x57]) name "PUSH" {
    reg index = opbyte(0) & 7;
    common opcode "PUSH" param(regw);
}

opcode sequence([0x58,0x5F]) name "POP" {
    reg index = opbyte(0) & 7;
    common opcode "POP" param(regw);
}

opcode sequence(0x70 immsb) name "JO" { common opcode "Jcc" param(immsb,ip,flags(OF),function(flags(OF))); }
opcode sequence(0x71 immsb) name "JNO" { common opcode "Jcc" param(immsb,ip,flags(OF),function(!flags(OF))); }
opcode sequence(0x72 immsb) name "JB" alias "JNAE" { common opcode "Jcc" param(immsb,ip,flags(CF),function(flags(CF))); }
opcode sequence(0x73 immsb) name "JNB" alias "JAE" { common opcode "Jcc" param(immsb,ip,flags(CF),function(!flags(CF))); }
opcode sequence(0x74 immsb) name "JZ" alias "JE" { common opcode "Jcc" param(immsb,ip,flags(ZF),function(flags(ZF))); }
opcode sequence(0x75 immsb) name "JNZ" alias "JNE" { common opcode "Jcc" param(immsb,ip,flags(ZF),function(!flags(ZF))); }
opcode sequence(0x76 immsb) name "JBE" alias "JNA" { common opcode "Jcc" param(immsb,ip,flags(CF,ZF),function(flags(CF) | flags(ZF))); }
opcode sequence(0x77 immsb) name "JNBE" alias "JA" { common opcode "Jcc" param(immsb,ip,flags(CF,ZF),function(!(flags(CF) | flags(ZF)))); }
opcode sequence(0x78 immsb) name "JS" { common opcode "Jcc" param(immsb,ip,flags(SF),function(flags(SF))); }
opcode sequence(0x79 immsb) name "JNS" { common opcode "Jcc" param(immsb,ip,flags(SF),function(!flags(SF))); }
opcode sequence(0x7A immsb) name "JP" alias "JPE" { common opcode "Jcc" param(immsb,ip,flags(PF),function(flags(PF))); }
opcode sequence(0x7B immsb) name "JNP" alias "JPO" { common opcode "Jcc" param(immsb,ip,flags(PF),function(!flags(PF))); }
opcode sequence(0x7C immsb) name "JL" alias "JNGE" { common opcode "Jcc" param(immsb,ip,flags(SF,OF),function(flags(SF) ^ flags(OF))); }
opcode sequence(0x7D immsb) name "JNL" alias "JGE" { common opcode "Jcc" param(immsb,ip,flags(SF,OF),function(!(flags(SF) ^ flags(OF)))); }
opcode sequence(0x7E immsb) name "JLE" alias "JNG" { common opcode "Jcc" param(immsb,ip,flags(SF,OF,ZF),function((flags(SF) ^ flags(OF)) | flags(ZF))); }
opcode sequence(0x7F immsb) name "JNLE" alias "JG" { common opcode "Jcc" param(immsb,ip,flags(SF,OF,ZF),function(!((flags(SF) ^ flags(OF)) | flags(ZF)))); }

